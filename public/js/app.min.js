(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var header = require('./modules/header'),   
    ajaxspiner = require('./helpers/ajaxspiner'),
    util = require('./helpers/util');

var pages = {
    homepage: require('./pages/home.page'),
    searchresultpage: require('./pages/searchresult.page')
}

function loadJavascriptForPage() {
    if(typeof window.pageContext === 'undefined' || typeof window.pageContext.pageName === 'undefined') {
        return;
    }

    if(typeof pages[window.pageContext.pageName] !== 'undefined') {
        pages[window.pageContext.pageName].init();
    }    
}

var app = {
    init: function() {    
        header.init();
        loadJavascriptForPage()
    }
};

$(function() {
    app.init();    
});
},{"./helpers/ajaxspiner":2,"./helpers/util":3,"./modules/header":4,"./pages/home.page":6,"./pages/searchresult.page":7}],2:[function(require,module,exports){
'use strict';

var ajaxspiner = {},
    spinner,
    spinnerContainer,
    defaultOpts = {
        lines: 11, // The number of lines to draw
        length: 15, // The length of each line
        width: 6, // The line thickness
        radius: 15, // The radius of the inner circle
        scale: 1, // Scales overall size of the spinner
        corners: 0.8, // Corner roundness (0..1)
        color: '#00C3FF', // #rgb or #rrggbb or array of colors
        opacity: 0.15, // Opacity of the lines
        rotate: 0, // The rotation offset
        direction: 1, // 1: clockwise, -1: counterclockwise
        speed: 1, // Rounds per second
        trail: 60, // Afterglow percentage
        fps: 20, // Frames per second when using setTimeout() as a fallback for CSS
        zIndex: 2e9, // The z-index (defaults to 2000000000)
        className: 'spinner', // The CSS class to assign to the spinner
        top: '50%', // Top position relative to parent
        left: '50%', // Left position relative to parent
        shadow: false, // Whether to render a shadow
        hwaccel: false, // Whether to use hardware acceleration
        position: 'absolute' // Element positioning
    };

ajaxspiner.start = function (spinnerSize, spinnerContainer, isSpinnerLoadingText, isOverlayDiv) {
    spinnerContainer = spinnerContainer || 'body';
    var spinnerSize = spinnerSize || 'large',
        isSpinnerLoadingText = isSpinnerLoadingText || false,
        isOverlayDiv = typeof isOverlayDiv !== 'undefined' ? isOverlayDiv : true,
        opts;

    switch (spinnerSize) {
        case 'small':
            opts = $.extend(defaultOpts, { lines: 11, length: 8, width: 3, radius: 6 });
            break;
        case 'medium':
            opts = $.extend(defaultOpts, { lines: 11, length: 10, width: 5, radius: 11 });
            break;
        default: //large size for page
            opts = defaultOpts;
            break;
    }
    //var baseClass = this;
    var target = document.querySelector(spinnerContainer);

    //check and add "position: relative" for spinner container
    if (target.style.position !== 'absolute' || target.style.position !== 'relative') {
        target.style.position = 'relative';
    }

    //add ajax overlay div
    if (isOverlayDiv !== false) {
        var overlayDiv = document.createElement('div');
        overlayDiv.classList.add('ajax-overlay');
        target.appendChild(overlayDiv);
    }

    spinner = new Spinner(opts).spin(target);
    if (typeof isSpinnerLoadingText !== 'undefined' && isSpinnerLoadingText === true) {
        var spinnerLoadingTextDiv = document.createElement('div');
        var textNote = document.createTextNode('Loading more ...');
        spinnerLoadingTextDiv.appendChild(textNote);
        spinnerLoadingTextDiv.classList.add('spinnerLoadingText');        
        spinnerLoadingTextDiv.classList.add(spinnerSize);
        spinner.el.appendChild(spinnerLoadingTextDiv);
    }
};

ajaxspiner.stop = function () {
    spinner.stop();
    $(spinnerContainer).find('.ajax-overlay').remove();
};

module.exports = ajaxspiner;
},{}],3:[function(require,module,exports){
'use strict';

function isAuthenticated() {
    if(typeof userId !== 'undefined' && userId !== '')
        return true;
    return false;
}

var util = {
    isAuthenticated: isAuthenticated
};

module.exports = util;
},{}],4:[function(require,module,exports){
'use strict';

var search = require('./search');

function toggleMenu() {
    $('.toggle-menu').on('click', function (e) {
        e.preventDefault();
        $('body').toggleClass('mobile-menu');
    })
}

function init() {
    toggleMenu();
    search.init();
}

module.exports = {
    init: init
}
},{"./search":5}],5:[function(require,module,exports){
'use strict';

function bindAutoComplete(data) {
    var $searchSuggestion = $('#search-suggestion');    
    $searchSuggestion.empty(); 

    if(data == null) {
        return;
    }

    var len = data.suggestions.length;
    var result = '<ul>';    
    $.each(data.suggestions, function(index, item) {        
        result += '<li><a href="/search?word=' + item.select + '&type=vi">' + $(item.data).html() + '</a></li>';
    });
    $searchSuggestion.append(result + '</ul>');
}

function searchAutocomplete() {
    $("#word").on('input', function() {
        var $self = $(this);
        var word = $self.val().trim();
        if(word === '') {
            bindAutoComplete(null);
            return;
        } 

        $.ajax({
            url: "/api/vidict/autocomplete/" + $(this).val().trim(),              
            method: "GET",
            dataType: "json",
            success: function (data) {      
                bindAutoComplete(data);
            }
        });     
    });    
}

function init() {
    searchAutocomplete();
}

module.exports = {
    init: init
};

},{}],6:[function(require,module,exports){
'use strict';

function init() {
    console.log('Home Page');
}

module.exports = {
    init: init
}
},{}],7:[function(require,module,exports){
'use strict';

var util = require('../helpers/util');

function addToList() {
    $('#addToList').on('click', function(e) {
        e.preventDefault();
        if(!util.isAuthenticated()) {
            $.magnificPopup.open({
                items: {
                    src: '.authen-popup', // can be a HTML string, jQuery object, or CSS selector
                    type: 'inline'
                }
            });
            return;
        }
    })
}

function init() {
    addToList();
}

module.exports = {
    init: init
}
},{"../helpers/util":3}]},{},[1])

//# sourceMappingURL=sourcemaps/app.min.js.map
