(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var header = require('./modules/header'),    
    util = require('./helpers/util');

var pages = {
    homepage: require('./pages/home.page'),
    searchresultpage: require('./pages/searchresult.page'),
    learnpage: require('./pages/learn.page'),
    wordcrawlerpage: require('./pages/wordcrawler.page')
}

function loadJavascriptForPage() {
    if(typeof window.pageContext === 'undefined' || typeof window.pageContext.pageName === 'undefined') {
        return;
    }

    if(typeof pages[window.pageContext.pageName] !== 'undefined') {
        pages[window.pageContext.pageName].init();
    }    
}

var app = {
    init: function() {    
        header.init();
        loadJavascriptForPage()
    }
};

$(function() {
    app.init();    
});
},{"./helpers/util":4,"./modules/header":5,"./pages/home.page":7,"./pages/learn.page":8,"./pages/searchresult.page":9,"./pages/wordcrawler.page":10}],2:[function(require,module,exports){
'use strict';

var ajaxspiner = require('./ajaxspiner'),
    util = require('./util'),
    ajax = {};

// function addAccessTokenToAjaxHeader(self, xhr) {
//     if (window.user.userId !== 0) {
//         if (typeof window.expat.access_token === 'undefined') {
//             self.getAccessToken();
//             if (typeof window.expat.access_token === 'undefined') {
//                 xhr.abort();
//             } else {
//                 xhr.setRequestHeader("Authorization", "Bearer " + window.expat.access_token);
//             }
//         } else {
//             xhr.setRequestHeader("Authorization", "Bearer " + window.expat.access_token);
//         }
//     }
// }

ajax.get = function (url, options) {    
    var deferred = $.Deferred();
    var ajaxSpinnerInstance;
    var opts = $.extend({}, options);    

    $.ajax({
        method: 'GET',
        url: url,
        contentType: 'application/json',
        beforeSend: function (xhr) {
            // if (opts.isDisplaySpinner !== false) {
            //     ajaxSpinnerInstance = new AjaxSpinner(opts.spinnerSize, opts.spinnerContainer, opts.isSpinnerLoadingText, opts.isOverlayDiv);
            //     ajaxSpinnerInstance.startSpinner();
            // }

            //addAccessTokenToAjaxHeader(self, xhr);
        },
        success: function (data) {
            deferred.resolve(data);
        },
        error: function (error) {            
            deferred.reject(error);
        },
        complete: function () {
            // if (opts.isDisplaySpinner !== true) {
            //     ajaxSpinnerInstance.stopSpinner();
            // }
        }
    });

    return deferred.promise();
};

// ajax.delete = function (url, options) {    
//     var deferred = $.Deferred();
//     var ajaxSpinnerInstance;
//     var opts = $.extend({}, options);
    
//     $.ajax({
//         method: 'DELETE',
//         url: url,
//         contentType: 'application/json',
//         beforeSend: function (xhr) {
//             if (typeof opts.isDisplaySpinner === 'undefined' || opts.isDisplaySpinner === true) {
//                 ajaxSpinnerInstance = new AjaxSpinner(opts.spinnerSize, opts.spinnerContainer, opts.isSpinnerLoadingText, opts.isOverlayDiv);
//                 ajaxSpinnerInstance.startSpinner();
//             }

//             if (url.indexOf('/api/') !== -1) {
//                 addAccessTokenToAjaxHeader(self, xhr);
//             }
//         },
//         success: function (data) {
//             deferred.resolve(data);
//         },
//         error: function (error) {
//             window.expat.access_token = undefined;
//             deferred.reject(error);
//         },
//         complete: function () {
//             if (typeof opts.isDisplaySpinner === 'undefined' || opts.isDisplaySpinner === true) {
//                 ajaxSpinnerInstance.stopSpinner();
//             }
//         }
//     });

//     return deferred.promise();
// };

// /*
//  * - url : api url
//  * - options
//  *  + spinnerSize : spinner size (small, medium, large), default is large
//  *  + spinnerContainer : container to append spinner and overlay, default is body
//  *  + spinnerContainer : By default, spinner is showed. Set value to false to hide spinner
//  *  + isSpinnerLoadingText : used to add "Loading ..." text under spinner icon
//  *  + isOverlayDiv : for display overlay div, default is true
//  * - postData : api post data
//  */
// BaseClass.prototype.sendPost = function (url, options, postData) {
//     var self = this;
//     var deferred = $.Deferred();
//     var ajaxSpinnerInstance;
//     var opts = $.extend({}, options);
//     postData = $.extend({ LoginUserId: expat.user.userId }, postData);

//     var contentType = typeof opts.contentType !== 'undefined' ? opts.contentType : 'application/x-www-form-urlencoded; charset=UTF-8';
//     if (opts.isStringify) {
//         postData = JSON.stringify(postData);
//     }

//     if (url.indexOf('/api/') !== -1) {
//         contentType = 'application/json';
//         postData = JSON.stringify(postData);
//     }
//     var ajaxOptions = {
//         method: 'POST',
//         url: url,
//         data: postData,
//         contentType: contentType,
//         //dataType: 'json',
//         beforeSend: function (xhr) {
//             if (typeof opts.isDisplaySpinner === 'undefined' || opts.isDisplaySpinner === true) {
//                 ajaxSpinnerInstance = new AjaxSpinner(opts.spinnerSize, opts.spinnerContainer, opts.isSpinnerLoadingText, opts.isOverlayDiv);
//                 ajaxSpinnerInstance.startSpinner();
//             }

//             if (url.indexOf('/api/') !== -1) {
//                 addAccessTokenToAjaxHeader(self, xhr);
//             }
//         },
//         success: function (data) {
//             deferred.resolve(data);
//         },
//         error: function (error) {
//             window.expat.access_token = undefined;
//             deferred.reject(error);
//         },
//         complete: function () {
//             if (typeof opts.isDisplaySpinner === 'undefined' || opts.isDisplaySpinner === true) {
//                 ajaxSpinnerInstance.stopSpinner();
//             }
//         }
//     };

//     $.ajax(ajaxOptions);

//     return deferred.promise();
// };

// /*
//  * - url : jquery template url
//  * - tmplId : template id
//  * - tmplData : data to bind into template
//  */
// BaseClass.prototype.generateTmpl = function (url, tmplId, tmplData) {
//     var baseClass = this;
//     var deferred = $.Deferred();

//     var $tmplId = $(tmplId);
//     if ($tmplId.length) {
//         deferred.resolve(bindTmpl($tmplId, tmplData));
//     }
//     else {
//         baseClass.sendGet(url, { isDisplaySpinner: false }).done(function (template) {
//             $('body').append(template);
//             deferred.resolve(bindTmpl($(tmplId), tmplData));
//         }).fail(function (error) {
//             deferred.reject(error);
//         });
//     }

//     return deferred;
// };

// //========================================
// // Private functions

// function bindTmpl($tmplId, tmplData) {
//     $.template($tmplId.attr('id'), $tmplId);
//     if (typeof tmplData !== 'undefined') {
//         return $.tmpl($tmplId.attr('id'), tmplData);
//     }
//     return $.tmpl($tmplId.attr('id'));
// }


module.exports = ajax;
},{"./ajaxspiner":3,"./util":4}],3:[function(require,module,exports){
'use strict';

var ajaxspiner = {},
    spinner,
    spinnerContainer,
    defaultOpts = {
        lines: 11, // The number of lines to draw
        length: 15, // The length of each line
        width: 6, // The line thickness
        radius: 15, // The radius of the inner circle
        scale: 1, // Scales overall size of the spinner
        corners: 0.8, // Corner roundness (0..1)
        color: '#00C3FF', // #rgb or #rrggbb or array of colors
        opacity: 0.15, // Opacity of the lines
        rotate: 0, // The rotation offset
        direction: 1, // 1: clockwise, -1: counterclockwise
        speed: 1, // Rounds per second
        trail: 60, // Afterglow percentage
        fps: 20, // Frames per second when using setTimeout() as a fallback for CSS
        zIndex: 2e9, // The z-index (defaults to 2000000000)
        className: 'spinner', // The CSS class to assign to the spinner
        top: '50%', // Top position relative to parent
        left: '50%', // Left position relative to parent
        shadow: false, // Whether to render a shadow
        hwaccel: false, // Whether to use hardware acceleration
        position: 'absolute' // Element positioning
    };

ajaxspiner.start = function (options) {
    options = options || {};
    spinnerContainer = options.spinnerContainer || 'body';
    var spinnerSize = options.spinnerSize || 'large',
        isSpinnerLoadingText = options.isSpinnerLoadingText || false,
        isOverlayDiv = typeof options.isOverlayDiv !== 'undefined' ? options.isOverlayDiv : true,
        opts;

    switch (spinnerSize) {
        case 'small':
            opts = $.extend(defaultOpts, { lines: 11, length: 8, width: 3, radius: 6 });
            break;
        case 'medium':
            opts = $.extend(defaultOpts, { lines: 11, length: 10, width: 5, radius: 11 });
            break;
        default: //large size for page
            opts = defaultOpts;
            break;
    }
    //var baseClass = this;
    var target = document.querySelector(spinnerContainer);

    //check and add "position: relative" for spinner container
    if (target.style.position !== 'absolute' || target.style.position !== 'relative') {
        target.style.position = 'relative';
    }

    //add ajax overlay div
    if (isOverlayDiv !== false) {
        var overlayDiv = document.createElement('div');
        overlayDiv.classList.add('ajax-overlay');
        target.appendChild(overlayDiv);
    }

    spinner = new Spinner(opts).spin(target);
    if (typeof isSpinnerLoadingText !== 'undefined' && isSpinnerLoadingText === true) {
        var spinnerLoadingTextDiv = document.createElement('div');
        var textNote = document.createTextNode('Loading more ...');
        spinnerLoadingTextDiv.appendChild(textNote);
        spinnerLoadingTextDiv.classList.add('spinnerLoadingText');        
        spinnerLoadingTextDiv.classList.add(spinnerSize);
        spinner.el.appendChild(spinnerLoadingTextDiv);
    }
};

ajaxspiner.stop = function () {
    spinner.stop();
    $(spinnerContainer).find('.ajax-overlay').remove();
};

module.exports = ajaxspiner;
},{}],4:[function(require,module,exports){
'use strict';

var ajaxspiner = require('./ajaxspiner');

function isMobile() {
    var mobileAgentHash = ['mobile', 'tablet', 'phone', 'ipad', 'ipod', 'android', 'blackberry', 'windows ce', 'opera mini', 'palm'];
    var    idx = 0;
    var isMobile = false;
    var userAgent = (navigator.userAgent).toLowerCase();

    while (mobileAgentHash[idx] && !isMobile) {
        isMobile = (userAgent.indexOf(mobileAgentHash[idx]) >= 0);
        idx++;
    }
    return isMobile;
}

function isAuthenticated() {
    if(typeof userId !== 'undefined' && userId !== '')
        return true;
    return false;
}

function openAjaxPopup(url, popupSelector) {    
    $.magnificPopup.open({
        items: {
            src: popupSelector
        },
        callbacks: {
            beforeOpen: function() {
                ajaxspiner.start({
                    spinnerContainer: popupSelector
                });
            }
        }
    });
}

var util = {
    isMobile: isMobile,
    isAuthenticated: isAuthenticated,
    openAjaxPopup: openAjaxPopup
};

module.exports = util;
},{"./ajaxspiner":3}],5:[function(require,module,exports){
'use strict';

var search = require('./search');

function toggleMenu() {
    $('.toggle-menu').on('click', function (e) {
        e.preventDefault();
        $('body').toggleClass('mobile-menu');
    })
}

function init() {
    toggleMenu();
    search.init();
}

module.exports = {
    init: init
}
},{"./search":6}],6:[function(require,module,exports){
'use strict';

var util = require('../helpers/util');

function searchAutocomplete() {
    // hide search result when hide device keyboard
    // document.addEventListener('focusout', function(e) {
    //     $('#search-suggestion').hide().empty();
    // });

    $("#word").on('input', function(e) {        
        console.time('autocomplete');    
        var $self = $(this);
        var word = $self.val().trim();
        $self.data('word', word);
        if(word.length < 1) {
            bindAutoComplete(null);
            return;
        } 

        var pagesize = 5, wWidth = $(window).width();
        if(wWidth >= 768 && wWidth < 1024) {
            pagesize = 8;
        } else {
            pagesize = 20;
        }

        $.ajax({
            url: "/api/vidict/autocomplete/" + $(this).val().trim() + '/' + pagesize + '/' + $('#hdfType').val(),              
            method: "GET",
            dataType: "json",
            success: function (data) {
                bindAutoComplete(data);                
                console.timeEnd('autocomplete');                
            }
        });     
    });    
}

//private function
function bindAutoComplete(data) {
    var $searchSuggestion = $('#search-suggestion');    
    $searchSuggestion.empty(); 

    if(data == null || data.length === 0) {
        $searchSuggestion.hide().empty();
        return;
    }

    var tmplSearchSuggestion = 
    '<ul>' +
        '{{each words}}' +
            '<li>' +
                '<a href="/search?word=${name}&type=vi">' +
                    '<p class="word-name"><span class="name">${name}</span> <span class="phonetic-spelling">${phoneticSpelling}</span></p>' +
                    '<p class="word-mean">{{if mainType}}<span class="main-type">[${mainType}]</span>{{/if}} {{if mainViMean}}{{html mainViMean}}{{else}}{{html mainEnMean}}{{/if}}</p>' +
                '</a>' +                
            '</li>' +
        '{{/each}}' +
    '</ul>';    
    $.tmpl(tmplSearchSuggestion, {words: data}).appendTo('#search-suggestion');
    $searchSuggestion.show();

    // $searchSuggestion.find('li').hover(function() {
    //     $('#search-suggestion li').removeClass('active');
    //     $(this).addClass('active');
    // }, function() {
    //     $('#search-suggestion li').removeClass('active');
    // });
}

function selectSearchType() {
    var $selectTypeContent = $('.select-types-content');
    $('.select-icons').on('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        $(this).toggleClass('active');
        $selectTypeContent.toggleClass('active');
    });
    
    $selectTypeContent.on('click', 'li', function(e) {
        e.preventDefault();
        var $self = $(this);
        $selectTypeContent.find('li').removeClass('active');
        $self.addClass('active');
        $selectTypeContent.find('#hdfType').val($self.data('type'));
        $selectTypeContent.removeClass('active');
        $('.select-icons').removeClass('active');
        $('#word').attr('placeholder', $self.text()).val('').data('word', '').focus();
    });
}

function handleClickOnWindow() {  
    if(/iP/i.test(navigator.userAgent)) {
        $('*:not("a")').css('cursor', 'pointer');
    };
    
    $(document).click(function() {        
        $('.select-types-content').removeClass('active');
        $('.select-icons').removeClass('active');
    });
}

function handleKeyDown() {
    if(util.isMobile()) { 
        console.log('handleKeyDown : isMobile');
        return;
    }
    
    var $searchSuggestion = $('#search-suggestion');
    var $inutWord = $('#word');    
    $inutWord.on('keydown', function(e) {                     
        if($searchSuggestion.css('display') === 'none') return;        

        var originInputValue = $inutWord.data('word');

        if(e.keyCode === 27) { //esc 
             $searchSuggestion.hide().empty();
             $inutWord.val(originInputValue);
        }
        
        if(e.keyCode === 38) { //up
            var $prev = $searchSuggestion.find('li.active').prev();
            $searchSuggestion.find('li.active').removeClass('active');
            if($prev.length > 0) {                
                $prev.addClass('active');
                $inutWord.val($prev.find('.name').text());
            } else {
                $inutWord.val(originInputValue);
            }
            e.preventDefault();
        } else if(e.keyCode === 40) { //down
            if($searchSuggestion.find('li.active').length > 0) {
                 $searchSuggestion.find('li:not(:last-child).active').removeClass('active').next().addClass('active');                 
            } else {
                $searchSuggestion.find('li:first').addClass('active');
            }
            $inutWord.val($searchSuggestion.find('li.active:first').find('.name').text());
            e.preventDefault();
        }
        var $currentItem = $searchSuggestion.find('li.active:first');
        if($currentItem.length > 0) {
            $searchSuggestion.scrollTop(0);            
            $searchSuggestion.scrollTop(($currentItem.position().top - $searchSuggestion.height()) + $currentItem.height());            
        }        
    });
}

function init() {
    $('#home-page #word').focus();
    searchAutocomplete();   
    selectSearchType();
    handleClickOnWindow();    
    handleKeyDown();
}

module.exports = {
    init: init
};

},{"../helpers/util":4}],7:[function(require,module,exports){
'use strict';
var util = require('../helpers/util');

function handleWindowScroll() {
    var $window = $(window);
    $window.scroll(function() {        
        var $window = $(window);
        if($window.width() < 1024 || util.isMobile()) return;

        if($window.scrollTop() >= 300) {                
            $('.search-section').addClass('fix-top').css({'z-index': '99999'});
            $('.about-section').css({'margin-top': '300px'});
        } else {                
            $('.search-section').removeClass('fix-top').css({'z-index': '1'});              
            $('.about-section').css({'margin-top': '0px'});
        }  
    });
}


function init() {
    handleWindowScroll();
}

module.exports = {
    init: init
}
},{"../helpers/util":4}],8:[function(require,module,exports){
'use strict';

function resetNotice() {
    var $notice = $('#notice');
    $notice.find('.correct').addClass('hide');
    $notice.find('.incorrect').addClass('hide').text('');
    $notice.find('.btn-ignore').show();
    $('.btn-check').text('Check');
}

function check() {
    var arrQuestions = $('.question-container').toArray(), qIndex = 1;
    $('.btn-check').on('click', function (e) {
        e.preventDefault();
        var $self = $(this),
            $questionContainer = $self.parents('.question-container'),                       
            $hdfAnswer = $questionContainer.find('.hdfAnswer');

            console.log(arrQuestions);

        if ($self.text() === 'Check') {
            var userAnswer = '';
            // get userAnswer
            if($questionContainer.data('type') === 1) {
                userAnswer = $questionContainer.find('input[type=radio]:checked').val().trim().toLowerCase();
            }
            if($questionContainer.data('type') === 2 || $questionContainer.data('type') === 3 || $questionContainer.data('type') === 4) {
                userAnswer = $questionContainer.find('.txt-answer').val().trim();
            }            

            // answer
            var answer = $hdfAnswer.val().trim().toLowerCase();
            
            if (userAnswer === answer) {
                $questionContainer.addClass('passed');
                $('#notice').find('.correct').removeClass('hide');
                $('#notice').find('.incorrect').addClass('hide');
                $('#notice').find('.btn-ignore').hide();
            } else {                
                $('#notice').find('.correct').addClass('hide');
                $('#notice').find('.incorrect').removeClass('hide');
                $('#notice').find('.incorrect').text('Correct is : ' + $questionContainer.find('.hdfAnswer').val());
                $('#notice').find('.btn-ignore').hide();
            }          

            $self.text('Continue');
        } else {
            $questionContainer.fadeOut(500, function () {                
                resetNotice();
                if(arrQuestions.length > qIndex) {
                    $(arrQuestions[qIndex]).fadeIn(500);
                    qIndex++;
                } else {
                    if($('.question-container:not(.passed)').length > 0) {
                        arrQuestions = $('.question-container:not(.passed)').toArray();
                        qIndex = 1;
                         $('.question-container:not(.passed):first').fadeIn(500);
                    } else {
                        $('#finish').removeClass('hide');
                    }                        
                }                             
            });
        }
    });
}

function playSound() { 
    $('.sound').on('click', function(e) {
        e.preventDefault();
        var audio = new Audio($(this).data('src'));
        audio.play();
    })
}

function init() {
    check();
    playSound();
}

module.exports = {
    init: init
}
},{}],9:[function(require,module,exports){
'use strict';

var util = require('../helpers/util'),
    ajax = require('../helpers/ajax');

function openAddWordPopup() {
    $('#addToList').on('click', function(e) {
        e.preventDefault();
        if(!util.isAuthenticated()) {
            $.magnificPopup.open({
                items: {
                    src: '.authen-popup'                    
                }
            });
            return;
        } else {
            $.magnificPopup.open({
                items: {
                    src: '.add-to-list-popup'
                },
                callbacks: {
                    beforeOpen: function() {
                        var options = '';
                        ajax.get('/api/lists').done(function(lists) {
                            $.each(lists, function(index, list) {
                                options += '<option value="' + list._id + '">' + list.title + '</option>';
                            });
                            $('.add-to-list-popup #list').empty();
                            $('.add-to-list-popup #list').append(options);
                        }).fail(function(err) {
                            console.log(err);
                        });
                    }
                }
            });
        }
    });
}

function addWordToList() {
    var $addToListPopup = $('#add-to-list-popup');
    $addToListPopup.on('click', 'button', function(e) {
        e.preventDefault();
        var data = {
            word: $addToListPopup.find('.hero-title').text(),
            translateToEn: '',
            translateToVi: document.getElementById('content_selectable').outerHTML,
            listId: $addToListPopup.find('#list').val()
        }

        console.log(data);

        $.ajax({
            url: '/api/words',
            method: 'POST',
            data: data,
            success: function(result) {
                console.log(result);
            },
            error: function(err) {
                console.log(err);
            }
        })
    })
}

function init() {
    //openAddWordPopup();
    //addWordToList();
}

module.exports = {
    init: init
}
},{"../helpers/ajax":2,"../helpers/util":4}],10:[function(require,module,exports){
'use strict';

function submit() {
    $('#btn-submit').on('click', function(e) {
        e.preventDefault();
        console.log('crawler');
        var postData = {
            url: $('#url').val(),
            fromindex: $('#fromindex').val(),
            toindex: $('#toindex').val()
        };        

        $.ajax({
            url: '/api/wordcrawler',
            method: 'POST',
            data: postData,
            success: function(result) {
                $('#msg').text(result).removeClass('hide');                
            },
            error: function(error) {
                $('#msg').text(error).removeClass('hide');
            }
        });
    });    
}

function init() {
    submit();
}

module.exports = {
    init: init
}
},{}]},{},[1])

//# sourceMappingURL=sourcemaps/app.min.js.map
