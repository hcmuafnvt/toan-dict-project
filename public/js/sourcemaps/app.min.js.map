{"version":3,"sources":["node_modules/browser-pack/_prelude.js","public/js/app.js","public/js/helpers/ajax.js","public/js/helpers/ajaxspiner.js","public/js/helpers/util.js","public/js/modules/header.js","public/js/modules/search.js","public/js/pages/home.page.js","public/js/pages/searchresult.page.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"../app.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nvar header = require('./modules/header'),    \n    util = require('./helpers/util');\n\nvar pages = {\n    homepage: require('./pages/home.page'),\n    searchresultpage: require('./pages/searchresult.page')\n}\n\nfunction loadJavascriptForPage() {\n    if(typeof window.pageContext === 'undefined' || typeof window.pageContext.pageName === 'undefined') {\n        return;\n    }\n\n    if(typeof pages[window.pageContext.pageName] !== 'undefined') {\n        pages[window.pageContext.pageName].init();\n    }    \n}\n\nvar app = {\n    init: function() {    \n        header.init();\n        loadJavascriptForPage()\n    }\n};\n\n$(function() {\n    app.init();    \n});","'use strict';\n\nvar ajaxspiner = require('./ajaxspiner'),\n    util = require('./util'),\n    ajax = {};\n\n// function addAccessTokenToAjaxHeader(self, xhr) {\n//     if (window.user.userId !== 0) {\n//         if (typeof window.expat.access_token === 'undefined') {\n//             self.getAccessToken();\n//             if (typeof window.expat.access_token === 'undefined') {\n//                 xhr.abort();\n//             } else {\n//                 xhr.setRequestHeader(\"Authorization\", \"Bearer \" + window.expat.access_token);\n//             }\n//         } else {\n//             xhr.setRequestHeader(\"Authorization\", \"Bearer \" + window.expat.access_token);\n//         }\n//     }\n// }\n\najax.get = function (url, options) {    \n    var deferred = $.Deferred();\n    var ajaxSpinnerInstance;\n    var opts = $.extend({}, options);    \n\n    $.ajax({\n        method: 'GET',\n        url: url,\n        contentType: 'application/json',\n        beforeSend: function (xhr) {\n            // if (opts.isDisplaySpinner !== false) {\n            //     ajaxSpinnerInstance = new AjaxSpinner(opts.spinnerSize, opts.spinnerContainer, opts.isSpinnerLoadingText, opts.isOverlayDiv);\n            //     ajaxSpinnerInstance.startSpinner();\n            // }\n\n            //addAccessTokenToAjaxHeader(self, xhr);\n        },\n        success: function (data) {\n            deferred.resolve(data);\n        },\n        error: function (error) {            \n            deferred.reject(error);\n        },\n        complete: function () {\n            // if (opts.isDisplaySpinner !== true) {\n            //     ajaxSpinnerInstance.stopSpinner();\n            // }\n        }\n    });\n\n    return deferred.promise();\n};\n\n// ajax.delete = function (url, options) {    \n//     var deferred = $.Deferred();\n//     var ajaxSpinnerInstance;\n//     var opts = $.extend({}, options);\n    \n//     $.ajax({\n//         method: 'DELETE',\n//         url: url,\n//         contentType: 'application/json',\n//         beforeSend: function (xhr) {\n//             if (typeof opts.isDisplaySpinner === 'undefined' || opts.isDisplaySpinner === true) {\n//                 ajaxSpinnerInstance = new AjaxSpinner(opts.spinnerSize, opts.spinnerContainer, opts.isSpinnerLoadingText, opts.isOverlayDiv);\n//                 ajaxSpinnerInstance.startSpinner();\n//             }\n\n//             if (url.indexOf('/api/') !== -1) {\n//                 addAccessTokenToAjaxHeader(self, xhr);\n//             }\n//         },\n//         success: function (data) {\n//             deferred.resolve(data);\n//         },\n//         error: function (error) {\n//             window.expat.access_token = undefined;\n//             deferred.reject(error);\n//         },\n//         complete: function () {\n//             if (typeof opts.isDisplaySpinner === 'undefined' || opts.isDisplaySpinner === true) {\n//                 ajaxSpinnerInstance.stopSpinner();\n//             }\n//         }\n//     });\n\n//     return deferred.promise();\n// };\n\n// /*\n//  * - url : api url\n//  * - options\n//  *  + spinnerSize : spinner size (small, medium, large), default is large\n//  *  + spinnerContainer : container to append spinner and overlay, default is body\n//  *  + spinnerContainer : By default, spinner is showed. Set value to false to hide spinner\n//  *  + isSpinnerLoadingText : used to add \"Loading ...\" text under spinner icon\n//  *  + isOverlayDiv : for display overlay div, default is true\n//  * - postData : api post data\n//  */\n// BaseClass.prototype.sendPost = function (url, options, postData) {\n//     var self = this;\n//     var deferred = $.Deferred();\n//     var ajaxSpinnerInstance;\n//     var opts = $.extend({}, options);\n//     postData = $.extend({ LoginUserId: expat.user.userId }, postData);\n\n//     var contentType = typeof opts.contentType !== 'undefined' ? opts.contentType : 'application/x-www-form-urlencoded; charset=UTF-8';\n//     if (opts.isStringify) {\n//         postData = JSON.stringify(postData);\n//     }\n\n//     if (url.indexOf('/api/') !== -1) {\n//         contentType = 'application/json';\n//         postData = JSON.stringify(postData);\n//     }\n//     var ajaxOptions = {\n//         method: 'POST',\n//         url: url,\n//         data: postData,\n//         contentType: contentType,\n//         //dataType: 'json',\n//         beforeSend: function (xhr) {\n//             if (typeof opts.isDisplaySpinner === 'undefined' || opts.isDisplaySpinner === true) {\n//                 ajaxSpinnerInstance = new AjaxSpinner(opts.spinnerSize, opts.spinnerContainer, opts.isSpinnerLoadingText, opts.isOverlayDiv);\n//                 ajaxSpinnerInstance.startSpinner();\n//             }\n\n//             if (url.indexOf('/api/') !== -1) {\n//                 addAccessTokenToAjaxHeader(self, xhr);\n//             }\n//         },\n//         success: function (data) {\n//             deferred.resolve(data);\n//         },\n//         error: function (error) {\n//             window.expat.access_token = undefined;\n//             deferred.reject(error);\n//         },\n//         complete: function () {\n//             if (typeof opts.isDisplaySpinner === 'undefined' || opts.isDisplaySpinner === true) {\n//                 ajaxSpinnerInstance.stopSpinner();\n//             }\n//         }\n//     };\n\n//     $.ajax(ajaxOptions);\n\n//     return deferred.promise();\n// };\n\n// /*\n//  * - url : jquery template url\n//  * - tmplId : template id\n//  * - tmplData : data to bind into template\n//  */\n// BaseClass.prototype.generateTmpl = function (url, tmplId, tmplData) {\n//     var baseClass = this;\n//     var deferred = $.Deferred();\n\n//     var $tmplId = $(tmplId);\n//     if ($tmplId.length) {\n//         deferred.resolve(bindTmpl($tmplId, tmplData));\n//     }\n//     else {\n//         baseClass.sendGet(url, { isDisplaySpinner: false }).done(function (template) {\n//             $('body').append(template);\n//             deferred.resolve(bindTmpl($(tmplId), tmplData));\n//         }).fail(function (error) {\n//             deferred.reject(error);\n//         });\n//     }\n\n//     return deferred;\n// };\n\n// //========================================\n// // Private functions\n\n// function bindTmpl($tmplId, tmplData) {\n//     $.template($tmplId.attr('id'), $tmplId);\n//     if (typeof tmplData !== 'undefined') {\n//         return $.tmpl($tmplId.attr('id'), tmplData);\n//     }\n//     return $.tmpl($tmplId.attr('id'));\n// }\n\n\nmodule.exports = ajax;","'use strict';\n\nvar ajaxspiner = {},\n    spinner,\n    spinnerContainer,\n    defaultOpts = {\n        lines: 11, // The number of lines to draw\n        length: 15, // The length of each line\n        width: 6, // The line thickness\n        radius: 15, // The radius of the inner circle\n        scale: 1, // Scales overall size of the spinner\n        corners: 0.8, // Corner roundness (0..1)\n        color: '#00C3FF', // #rgb or #rrggbb or array of colors\n        opacity: 0.15, // Opacity of the lines\n        rotate: 0, // The rotation offset\n        direction: 1, // 1: clockwise, -1: counterclockwise\n        speed: 1, // Rounds per second\n        trail: 60, // Afterglow percentage\n        fps: 20, // Frames per second when using setTimeout() as a fallback for CSS\n        zIndex: 2e9, // The z-index (defaults to 2000000000)\n        className: 'spinner', // The CSS class to assign to the spinner\n        top: '50%', // Top position relative to parent\n        left: '50%', // Left position relative to parent\n        shadow: false, // Whether to render a shadow\n        hwaccel: false, // Whether to use hardware acceleration\n        position: 'absolute' // Element positioning\n    };\n\najaxspiner.start = function (options) {\n    options = options || {};\n    spinnerContainer = options.spinnerContainer || 'body';\n    var spinnerSize = options.spinnerSize || 'large',\n        isSpinnerLoadingText = options.isSpinnerLoadingText || false,\n        isOverlayDiv = typeof options.isOverlayDiv !== 'undefined' ? options.isOverlayDiv : true,\n        opts;\n\n    switch (spinnerSize) {\n        case 'small':\n            opts = $.extend(defaultOpts, { lines: 11, length: 8, width: 3, radius: 6 });\n            break;\n        case 'medium':\n            opts = $.extend(defaultOpts, { lines: 11, length: 10, width: 5, radius: 11 });\n            break;\n        default: //large size for page\n            opts = defaultOpts;\n            break;\n    }\n    //var baseClass = this;\n    var target = document.querySelector(spinnerContainer);\n\n    //check and add \"position: relative\" for spinner container\n    if (target.style.position !== 'absolute' || target.style.position !== 'relative') {\n        target.style.position = 'relative';\n    }\n\n    //add ajax overlay div\n    if (isOverlayDiv !== false) {\n        var overlayDiv = document.createElement('div');\n        overlayDiv.classList.add('ajax-overlay');\n        target.appendChild(overlayDiv);\n    }\n\n    spinner = new Spinner(opts).spin(target);\n    if (typeof isSpinnerLoadingText !== 'undefined' && isSpinnerLoadingText === true) {\n        var spinnerLoadingTextDiv = document.createElement('div');\n        var textNote = document.createTextNode('Loading more ...');\n        spinnerLoadingTextDiv.appendChild(textNote);\n        spinnerLoadingTextDiv.classList.add('spinnerLoadingText');        \n        spinnerLoadingTextDiv.classList.add(spinnerSize);\n        spinner.el.appendChild(spinnerLoadingTextDiv);\n    }\n};\n\najaxspiner.stop = function () {\n    spinner.stop();\n    $(spinnerContainer).find('.ajax-overlay').remove();\n};\n\nmodule.exports = ajaxspiner;","'use strict';\n\nvar ajaxspiner = require('./ajaxspiner');\n\nfunction isAuthenticated() {\n    if(typeof userId !== 'undefined' && userId !== '')\n        return true;\n    return false;\n}\n\nfunction openAjaxPopup(url, popupSelector) {    \n    $.magnificPopup.open({\n        items: {\n            src: popupSelector\n        },\n        callbacks: {\n            beforeOpen: function() {\n                ajaxspiner.start({\n                    spinnerContainer: popupSelector\n                });\n            }\n        }\n    });\n}\n\nvar util = {\n    isAuthenticated: isAuthenticated,\n    openAjaxPopup: openAjaxPopup\n};\n\nmodule.exports = util;","'use strict';\n\nvar search = require('./search');\n\nfunction toggleMenu() {\n    $('.toggle-menu').on('click', function (e) {\n        e.preventDefault();\n        $('body').toggleClass('mobile-menu');\n    })\n}\n\nfunction init() {\n    toggleMenu();\n    search.init();\n}\n\nmodule.exports = {\n    init: init\n}","'use strict';\n\nfunction bindAutoComplete(data) {\n    var $searchSuggestion = $('#search-suggestion');    \n    $searchSuggestion.empty(); \n\n    if(data == null) {\n        return;\n    }\n\n    var len = data.suggestions.length;\n    var result = '<ul>';    \n    $.each(data.suggestions, function(index, item) {        \n        result += '<li><a href=\"/search?word=' + item.select + '&type=vi\">' + $(item.data).html() + '</a></li>';\n    });\n    $searchSuggestion.append(result + '</ul>');\n}\n\nfunction searchAutocomplete() {\n    $(\"#word\").on('input', function() {\n        var $self = $(this);\n        var word = $self.val().trim();\n        if(word === '') {\n            bindAutoComplete(null);\n            return;\n        } \n\n        $.ajax({\n            url: \"/api/vidict/autocomplete/\" + $(this).val().trim(),              \n            method: \"GET\",\n            dataType: \"json\",\n            success: function (data) {      \n                bindAutoComplete(data);\n            }\n        });     \n    });    \n}\n\nfunction init() {\n    searchAutocomplete();\n}\n\nmodule.exports = {\n    init: init\n};\n","'use strict';\n\nfunction init() {\n    console.log('Home Page');\n}\n\nmodule.exports = {\n    init: init\n}","'use strict';\n\nvar util = require('../helpers/util'),\n    ajax = require('../helpers/ajax');\n\nfunction addToList() {\n    $('#addToList').on('click', function(e) {\n        e.preventDefault();\n        if(!util.isAuthenticated()) {\n            $.magnificPopup.open({\n                items: {\n                    src: '.authen-popup'                    \n                }\n            });\n            return;\n        } else {\n            $.magnificPopup.open({\n                items: {\n                    src: '.add-to-list-popup'\n                },\n                callbacks: {\n                    beforeOpen: function() {\n                        var options = '';\n                        ajax.get('/api/lists').done(function(lists) {\n                            $.each(lists, function(index, list) {\n                                options += '<option value=\"' + list._id + '\">' + list.title + '</option>';\n                            });\n                            $('.add-to-list-popup #list').empty();\n                            $('.add-to-list-popup #list').append(options);\n                        }).fail(function(err) {\n                            console.log(err);\n                        });\n                    }\n                }\n            });\n        }\n    });\n}\n\nfunction init() {\n    addToList();\n}\n\nmodule.exports = {\n    init: init\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}