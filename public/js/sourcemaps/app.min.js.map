{"version":3,"sources":["node_modules/browser-pack/_prelude.js","public/js/app.js","public/js/helpers/ajax.js","public/js/helpers/ajaxspiner.js","public/js/helpers/util.js","public/js/modules/header.js","public/js/modules/search.js","public/js/pages/home.page.js","public/js/pages/learn.page.js","public/js/pages/searchresult.page.js","public/js/pages/wordcrawler.page.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACljFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"../app.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nvar header = require('./modules/header'),    \n    util = require('./helpers/util');\n\nvar pages = {\n    homepage: require('./pages/home.page'),\n    searchresultpage: require('./pages/searchresult.page'),\n    learnpage: require('./pages/learn.page'),\n    wordcrawlerpage: require('./pages/wordcrawler.page')\n}\n\nfunction loadJavascriptForPage() {\n    if(typeof window.pageContext === 'undefined' || typeof window.pageContext.pageName === 'undefined') {\n        return;\n    }\n\n    if(typeof pages[window.pageContext.pageName] !== 'undefined') {\n        pages[window.pageContext.pageName].init();\n    }    \n}\n\nvar app = {\n    init: function() {    \n        header.init();\n        loadJavascriptForPage()\n    }\n};\n\n$(function() {\n    app.init();    \n});","'use strict';\n\nvar ajaxspiner = require('./ajaxspiner'),\n    util = require('./util'),\n    ajax = {};\n\n// function addAccessTokenToAjaxHeader(self, xhr) {\n//     if (window.user.userId !== 0) {\n//         if (typeof window.expat.access_token === 'undefined') {\n//             self.getAccessToken();\n//             if (typeof window.expat.access_token === 'undefined') {\n//                 xhr.abort();\n//             } else {\n//                 xhr.setRequestHeader(\"Authorization\", \"Bearer \" + window.expat.access_token);\n//             }\n//         } else {\n//             xhr.setRequestHeader(\"Authorization\", \"Bearer \" + window.expat.access_token);\n//         }\n//     }\n// }\n\najax.get = function (url, options) {    \n    var deferred = $.Deferred();\n    var ajaxSpinnerInstance;\n    var opts = $.extend({}, options);    \n\n    $.ajax({\n        method: 'GET',\n        url: url,\n        contentType: 'application/json',\n        beforeSend: function (xhr) {\n            // if (opts.isDisplaySpinner !== false) {\n            //     ajaxSpinnerInstance = new AjaxSpinner(opts.spinnerSize, opts.spinnerContainer, opts.isSpinnerLoadingText, opts.isOverlayDiv);\n            //     ajaxSpinnerInstance.startSpinner();\n            // }\n\n            //addAccessTokenToAjaxHeader(self, xhr);\n        },\n        success: function (data) {\n            deferred.resolve(data);\n        },\n        error: function (error) {            \n            deferred.reject(error);\n        },\n        complete: function () {\n            // if (opts.isDisplaySpinner !== true) {\n            //     ajaxSpinnerInstance.stopSpinner();\n            // }\n        }\n    });\n\n    return deferred.promise();\n};\n\n// ajax.delete = function (url, options) {    \n//     var deferred = $.Deferred();\n//     var ajaxSpinnerInstance;\n//     var opts = $.extend({}, options);\n    \n//     $.ajax({\n//         method: 'DELETE',\n//         url: url,\n//         contentType: 'application/json',\n//         beforeSend: function (xhr) {\n//             if (typeof opts.isDisplaySpinner === 'undefined' || opts.isDisplaySpinner === true) {\n//                 ajaxSpinnerInstance = new AjaxSpinner(opts.spinnerSize, opts.spinnerContainer, opts.isSpinnerLoadingText, opts.isOverlayDiv);\n//                 ajaxSpinnerInstance.startSpinner();\n//             }\n\n//             if (url.indexOf('/api/') !== -1) {\n//                 addAccessTokenToAjaxHeader(self, xhr);\n//             }\n//         },\n//         success: function (data) {\n//             deferred.resolve(data);\n//         },\n//         error: function (error) {\n//             window.expat.access_token = undefined;\n//             deferred.reject(error);\n//         },\n//         complete: function () {\n//             if (typeof opts.isDisplaySpinner === 'undefined' || opts.isDisplaySpinner === true) {\n//                 ajaxSpinnerInstance.stopSpinner();\n//             }\n//         }\n//     });\n\n//     return deferred.promise();\n// };\n\n// /*\n//  * - url : api url\n//  * - options\n//  *  + spinnerSize : spinner size (small, medium, large), default is large\n//  *  + spinnerContainer : container to append spinner and overlay, default is body\n//  *  + spinnerContainer : By default, spinner is showed. Set value to false to hide spinner\n//  *  + isSpinnerLoadingText : used to add \"Loading ...\" text under spinner icon\n//  *  + isOverlayDiv : for display overlay div, default is true\n//  * - postData : api post data\n//  */\n// BaseClass.prototype.sendPost = function (url, options, postData) {\n//     var self = this;\n//     var deferred = $.Deferred();\n//     var ajaxSpinnerInstance;\n//     var opts = $.extend({}, options);\n//     postData = $.extend({ LoginUserId: expat.user.userId }, postData);\n\n//     var contentType = typeof opts.contentType !== 'undefined' ? opts.contentType : 'application/x-www-form-urlencoded; charset=UTF-8';\n//     if (opts.isStringify) {\n//         postData = JSON.stringify(postData);\n//     }\n\n//     if (url.indexOf('/api/') !== -1) {\n//         contentType = 'application/json';\n//         postData = JSON.stringify(postData);\n//     }\n//     var ajaxOptions = {\n//         method: 'POST',\n//         url: url,\n//         data: postData,\n//         contentType: contentType,\n//         //dataType: 'json',\n//         beforeSend: function (xhr) {\n//             if (typeof opts.isDisplaySpinner === 'undefined' || opts.isDisplaySpinner === true) {\n//                 ajaxSpinnerInstance = new AjaxSpinner(opts.spinnerSize, opts.spinnerContainer, opts.isSpinnerLoadingText, opts.isOverlayDiv);\n//                 ajaxSpinnerInstance.startSpinner();\n//             }\n\n//             if (url.indexOf('/api/') !== -1) {\n//                 addAccessTokenToAjaxHeader(self, xhr);\n//             }\n//         },\n//         success: function (data) {\n//             deferred.resolve(data);\n//         },\n//         error: function (error) {\n//             window.expat.access_token = undefined;\n//             deferred.reject(error);\n//         },\n//         complete: function () {\n//             if (typeof opts.isDisplaySpinner === 'undefined' || opts.isDisplaySpinner === true) {\n//                 ajaxSpinnerInstance.stopSpinner();\n//             }\n//         }\n//     };\n\n//     $.ajax(ajaxOptions);\n\n//     return deferred.promise();\n// };\n\n// /*\n//  * - url : jquery template url\n//  * - tmplId : template id\n//  * - tmplData : data to bind into template\n//  */\n// BaseClass.prototype.generateTmpl = function (url, tmplId, tmplData) {\n//     var baseClass = this;\n//     var deferred = $.Deferred();\n\n//     var $tmplId = $(tmplId);\n//     if ($tmplId.length) {\n//         deferred.resolve(bindTmpl($tmplId, tmplData));\n//     }\n//     else {\n//         baseClass.sendGet(url, { isDisplaySpinner: false }).done(function (template) {\n//             $('body').append(template);\n//             deferred.resolve(bindTmpl($(tmplId), tmplData));\n//         }).fail(function (error) {\n//             deferred.reject(error);\n//         });\n//     }\n\n//     return deferred;\n// };\n\n// //========================================\n// // Private functions\n\n// function bindTmpl($tmplId, tmplData) {\n//     $.template($tmplId.attr('id'), $tmplId);\n//     if (typeof tmplData !== 'undefined') {\n//         return $.tmpl($tmplId.attr('id'), tmplData);\n//     }\n//     return $.tmpl($tmplId.attr('id'));\n// }\n\n\nmodule.exports = ajax;","'use strict';\n\nvar ajaxspiner = {},\n    spinner,\n    spinnerContainer,\n    defaultOpts = {\n        lines: 11, // The number of lines to draw\n        length: 15, // The length of each line\n        width: 6, // The line thickness\n        radius: 15, // The radius of the inner circle\n        scale: 1, // Scales overall size of the spinner\n        corners: 0.8, // Corner roundness (0..1)\n        color: '#00C3FF', // #rgb or #rrggbb or array of colors\n        opacity: 0.15, // Opacity of the lines\n        rotate: 0, // The rotation offset\n        direction: 1, // 1: clockwise, -1: counterclockwise\n        speed: 1, // Rounds per second\n        trail: 60, // Afterglow percentage\n        fps: 20, // Frames per second when using setTimeout() as a fallback for CSS\n        zIndex: 2e9, // The z-index (defaults to 2000000000)\n        className: 'spinner', // The CSS class to assign to the spinner\n        top: '50%', // Top position relative to parent\n        left: '50%', // Left position relative to parent\n        shadow: false, // Whether to render a shadow\n        hwaccel: false, // Whether to use hardware acceleration\n        position: 'absolute' // Element positioning\n    };\n\najaxspiner.start = function (options) {\n    options = options || {};\n    spinnerContainer = options.spinnerContainer || 'body';\n    var spinnerSize = options.spinnerSize || 'large',\n        isSpinnerLoadingText = options.isSpinnerLoadingText || false,\n        isOverlayDiv = typeof options.isOverlayDiv !== 'undefined' ? options.isOverlayDiv : true,\n        opts;\n\n    switch (spinnerSize) {\n        case 'small':\n            opts = $.extend(defaultOpts, { lines: 11, length: 8, width: 3, radius: 6 });\n            break;\n        case 'medium':\n            opts = $.extend(defaultOpts, { lines: 11, length: 10, width: 5, radius: 11 });\n            break;\n        default: //large size for page\n            opts = defaultOpts;\n            break;\n    }\n    //var baseClass = this;\n    var target = document.querySelector(spinnerContainer);\n\n    //check and add \"position: relative\" for spinner container\n    if (target.style.position !== 'absolute' || target.style.position !== 'relative') {\n        target.style.position = 'relative';\n    }\n\n    //add ajax overlay div\n    if (isOverlayDiv !== false) {\n        var overlayDiv = document.createElement('div');\n        overlayDiv.classList.add('ajax-overlay');\n        target.appendChild(overlayDiv);\n    }\n\n    spinner = new Spinner(opts).spin(target);\n    if (typeof isSpinnerLoadingText !== 'undefined' && isSpinnerLoadingText === true) {\n        var spinnerLoadingTextDiv = document.createElement('div');\n        var textNote = document.createTextNode('Loading more ...');\n        spinnerLoadingTextDiv.appendChild(textNote);\n        spinnerLoadingTextDiv.classList.add('spinnerLoadingText');        \n        spinnerLoadingTextDiv.classList.add(spinnerSize);\n        spinner.el.appendChild(spinnerLoadingTextDiv);\n    }\n};\n\najaxspiner.stop = function () {\n    spinner.stop();\n    $(spinnerContainer).find('.ajax-overlay').remove();\n};\n\nmodule.exports = ajaxspiner;","'use strict';\n\nvar ajaxspiner = require('./ajaxspiner');\n\nfunction isMobile() {\n    var mobileAgentHash = ['mobile', 'tablet', 'phone', 'ipad', 'ipod', 'android', 'blackberry', 'windows ce', 'opera mini', 'palm'];\n    var    idx = 0;\n    var isMobile = false;\n    var userAgent = (navigator.userAgent).toLowerCase();\n\n    while (mobileAgentHash[idx] && !isMobile) {\n        isMobile = (userAgent.indexOf(mobileAgentHash[idx]) >= 0);\n        idx++;\n    }\n    return isMobile;\n}\n\nfunction isAuthenticated() {\n    if(typeof userId !== 'undefined' && userId !== '')\n        return true;\n    return false;\n}\n\nfunction openAjaxPopup(url, popupSelector) {    \n    $.magnificPopup.open({\n        items: {\n            src: popupSelector\n        },\n        callbacks: {\n            beforeOpen: function() {\n                ajaxspiner.start({\n                    spinnerContainer: popupSelector\n                });\n            }\n        }\n    });\n}\n\nvar util = {\n    isMobile: isMobile,\n    isAuthenticated: isAuthenticated,\n    openAjaxPopup: openAjaxPopup\n};\n\nmodule.exports = util;","'use strict';\n\nvar search = require('./search');\n\nfunction toggleMenu() {\n    $('.toggle-menu').on('click', function (e) {\n        e.preventDefault();\n        $('body').toggleClass('mobile-menu');\n    })\n}\n\nfunction init() {\n    toggleMenu();\n    search.init();\n}\n\nmodule.exports = {\n    init: init\n}","'use strict';\n\nvar util = require('../helpers/util');\n\nfunction searchAutocomplete() {\n    // hide search result when hide device keyboard\n    document.addEventListener('focusout', function(e) {\n        $('#search-suggestion').hide().empty();\n    });\n\n    $(\"#word\").on('input', function(e) {        \n        console.time('autocomplete');    \n        var $self = $(this);\n        var word = $self.val().trim();\n        $self.data('word', word);\n        if(word.length < 1) {\n            bindAutoComplete(null);\n            return;\n        } \n\n        var pagesize = 5, wWidth = $(window).width();\n        if(wWidth >= 768 && wWidth < 1024) {\n            pagesize = 8;\n        } else {\n            pagesize = 20;\n        }\n\n        $.ajax({\n            url: \"/api/vidict/autocomplete/\" + $(this).val().trim() + '/' + pagesize + '/' + $('#hdfType').val(),              \n            method: \"GET\",\n            dataType: \"json\",\n            success: function (data) {\n                bindAutoComplete(data);                \n                console.timeEnd('autocomplete');                \n            }\n        });     \n    });    \n}\n\n//private function\nfunction bindAutoComplete(data) {\n    var $searchSuggestion = $('#search-suggestion');    \n    $searchSuggestion.empty(); \n\n    if(data == null || data.length === 0) {\n        $searchSuggestion.hide().empty();\n        return;\n    }\n\n    var tmplSearchSuggestion = \n    '<ul>' +\n        '{{each words}}' +\n            '<li>' +\n                '<a href=\"/search?word=${name}&type=vi\">' +\n                    '<p class=\"word-name\"><span class=\"name\">${name}</span> <span class=\"phonetic-spelling\">${phoneticSpelling}</span></p>' +\n                    '<p class=\"word-mean\">{{if mainType}}<span class=\"main-type\">[${mainType}]</span>{{/if}} {{if mainViMean}}{{html mainViMean}}{{else}}{{html mainEnMean}}{{/if}}</p>' +\n                '</a>' +                \n            '</li>' +\n        '{{/each}}' +\n    '</ul>';    \n    $.tmpl(tmplSearchSuggestion, {words: data}).appendTo('#search-suggestion');\n    $searchSuggestion.show();\n\n    // $searchSuggestion.find('li').hover(function() {\n    //     $('#search-suggestion li').removeClass('active');\n    //     $(this).addClass('active');\n    // }, function() {\n    //     $('#search-suggestion li').removeClass('active');\n    // });\n}\n\nfunction selectSearchType() {\n    var $selectTypeContent = $('.select-types-content');\n    $('.select-icons').on('click', function(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        $(this).toggleClass('active');\n        $selectTypeContent.toggleClass('active');\n    });\n    \n    $selectTypeContent.on('click', 'li', function(e) {\n        e.preventDefault();\n        var $self = $(this);\n        $selectTypeContent.find('li').removeClass('active');\n        $self.addClass('active');\n        $selectTypeContent.find('#hdfType').val($self.data('type'));\n        $selectTypeContent.removeClass('active');\n        $('.select-icons').removeClass('active');\n        $('#word').attr('placeholder', $self.text()).val('').data('word', '').focus();\n    });\n}\n\nfunction handleClickOnWindow() {  \n    if(/iP/i.test(navigator.userAgent)) {\n        $('*').css('cursor', 'pointer');\n    };\n    \n    $(document).click(function() {        \n        $('.select-types-content').removeClass('active');\n        $('.select-icons').removeClass('active');\n    });\n}\n\nfunction handleKeyDown() {\n    if(util.isMobile()) { \n        console.log('handleKeyDown : isMobile');\n        return;\n    }\n    \n    var $searchSuggestion = $('#search-suggestion');\n    var $inutWord = $('#word');    \n    $inutWord.on('keydown', function(e) {                     \n        if($searchSuggestion.css('display') === 'none') return;        \n\n        var originInputValue = $inutWord.data('word');\n\n        if(e.keyCode === 27) { //esc \n             $searchSuggestion.hide().empty();\n             $inutWord.val(originInputValue);\n        }\n        \n        if(e.keyCode === 38) { //up\n            var $prev = $searchSuggestion.find('li.active').prev();\n            $searchSuggestion.find('li.active').removeClass('active');\n            if($prev.length > 0) {                \n                $prev.addClass('active');\n                $inutWord.val($prev.find('.name').text());\n            } else {\n                $inutWord.val(originInputValue);\n            }\n            e.preventDefault();\n        } else if(e.keyCode === 40) { //down\n            if($searchSuggestion.find('li.active').length > 0) {\n                 $searchSuggestion.find('li:not(:last-child).active').removeClass('active').next().addClass('active');                 \n            } else {\n                $searchSuggestion.find('li:first').addClass('active');\n            }\n            $inutWord.val($searchSuggestion.find('li.active:first').find('.name').text());\n            e.preventDefault();\n        }\n        var $currentItem = $searchSuggestion.find('li.active:first');\n        if($currentItem.length > 0) {\n            $searchSuggestion.scrollTop(0);            \n            $searchSuggestion.scrollTop(($currentItem.position().top - $searchSuggestion.height()) + $currentItem.height());            \n        }        \n    });\n}\n\nfunction init() {\n    $('#word').focus();\n    searchAutocomplete();   \n    selectSearchType();\n    handleClickOnWindow();    \n    handleKeyDown();\n}\n\nmodule.exports = {\n    init: init\n};\n","'use strict';\nvar util = require('../helpers/util');\n\nfunction handleWindowScroll() {\n    var $window = $(window);\n    $window.scroll(function() {        \n        var $window = $(window);\n        if($window.width() < 1024 || util.isMobile()) return;\n\n        if($window.scrollTop() >= 300) {                \n            $('.search-section').addClass('fix-top').css({'z-index': '99999'});\n            $('.about-section').css({'margin-top': '300px'});\n        } else {                \n            $('.search-section').removeClass('fix-top').css({'z-index': '1'});              \n            $('.about-section').css({'margin-top': '0px'});\n        }  \n    });\n}\n\n\nfunction init() {\n    handleWindowScroll();\n}\n\nmodule.exports = {\n    init: init\n}","'use strict';\n\nfunction resetNotice() {\n    var $notice = $('#notice');\n    $notice.find('.correct').addClass('hide');\n    $notice.find('.incorrect').addClass('hide').text('');\n    $notice.find('.btn-ignore').show();\n    $('.btn-check').text('Check');\n}\n\nfunction check() {\n    var arrQuestions = $('.question-container').toArray(), qIndex = 1;\n    $('.btn-check').on('click', function (e) {\n        e.preventDefault();\n        var $self = $(this),\n            $questionContainer = $self.parents('.question-container'),                       \n            $hdfAnswer = $questionContainer.find('.hdfAnswer');\n\n            console.log(arrQuestions);\n\n        if ($self.text() === 'Check') {\n            var userAnswer = '';\n            // get userAnswer\n            if($questionContainer.data('type') === 1) {\n                userAnswer = $questionContainer.find('input[type=radio]:checked').val().trim().toLowerCase();\n            }\n            if($questionContainer.data('type') === 2 || $questionContainer.data('type') === 3 || $questionContainer.data('type') === 4) {\n                userAnswer = $questionContainer.find('.txt-answer').val().trim();\n            }            \n\n            // answer\n            var answer = $hdfAnswer.val().trim().toLowerCase();\n            \n            if (userAnswer === answer) {\n                $questionContainer.addClass('passed');\n                $('#notice').find('.correct').removeClass('hide');\n                $('#notice').find('.incorrect').addClass('hide');\n                $('#notice').find('.btn-ignore').hide();\n            } else {                \n                $('#notice').find('.correct').addClass('hide');\n                $('#notice').find('.incorrect').removeClass('hide');\n                $('#notice').find('.incorrect').text('Correct is : ' + $questionContainer.find('.hdfAnswer').val());\n                $('#notice').find('.btn-ignore').hide();\n            }          \n\n            $self.text('Continue');\n        } else {\n            $questionContainer.fadeOut(500, function () {                \n                resetNotice();\n                if(arrQuestions.length > qIndex) {\n                    $(arrQuestions[qIndex]).fadeIn(500);\n                    qIndex++;\n                } else {\n                    if($('.question-container:not(.passed)').length > 0) {\n                        arrQuestions = $('.question-container:not(.passed)').toArray();\n                        qIndex = 1;\n                         $('.question-container:not(.passed):first').fadeIn(500);\n                    } else {\n                        $('#finish').removeClass('hide');\n                    }                        \n                }                             \n            });\n        }\n    });\n}\n\nfunction playSound() { \n    $('.sound').on('click', function(e) {\n        e.preventDefault();\n        var audio = new Audio($(this).data('src'));\n        audio.play();\n    })\n}\n\nfunction init() {\n    check();\n    playSound();\n}\n\nmodule.exports = {\n    init: init\n}","'use strict';\n\nvar util = require('../helpers/util'),\n    ajax = require('../helpers/ajax');\n\nfunction openAddWordPopup() {\n    $('#addToList').on('click', function(e) {\n        e.preventDefault();\n        if(!util.isAuthenticated()) {\n            $.magnificPopup.open({\n                items: {\n                    src: '.authen-popup'                    \n                }\n            });\n            return;\n        } else {\n            $.magnificPopup.open({\n                items: {\n                    src: '.add-to-list-popup'\n                },\n                callbacks: {\n                    beforeOpen: function() {\n                        var options = '';\n                        ajax.get('/api/lists').done(function(lists) {\n                            $.each(lists, function(index, list) {\n                                options += '<option value=\"' + list._id + '\">' + list.title + '</option>';\n                            });\n                            $('.add-to-list-popup #list').empty();\n                            $('.add-to-list-popup #list').append(options);\n                        }).fail(function(err) {\n                            console.log(err);\n                        });\n                    }\n                }\n            });\n        }\n    });\n}\n\nfunction addWordToList() {\n    var $addToListPopup = $('#add-to-list-popup');\n    $addToListPopup.on('click', 'button', function(e) {\n        e.preventDefault();\n        var data = {\n            word: $addToListPopup.find('.hero-title').text(),\n            translateToEn: '',\n            translateToVi: document.getElementById('content_selectable').outerHTML,\n            listId: $addToListPopup.find('#list').val()\n        }\n\n        console.log(data);\n\n        $.ajax({\n            url: '/api/words',\n            method: 'POST',\n            data: data,\n            success: function(result) {\n                console.log(result);\n            },\n            error: function(err) {\n                console.log(err);\n            }\n        })\n    })\n}\n\nfunction init() {\n    openAddWordPopup();\n    addWordToList();\n}\n\nmodule.exports = {\n    init: init\n}","'use strict';\n\nfunction submit() {\n    $('#btn-submit').on('click', function(e) {\n        e.preventDefault();\n        console.log('crawler');\n        var postData = {\n            url: $('#url').val(),\n            fromindex: $('#fromindex').val(),\n            toindex: $('#toindex').val()\n        };        \n\n        $.ajax({\n            url: '/api/wordcrawler',\n            method: 'POST',\n            data: postData,\n            success: function(result) {\n                $('#msg').text(result).removeClass('hide');                \n            },\n            error: function(error) {\n                $('#msg').text(error).removeClass('hide');\n            }\n        });\n    });    \n}\n\nfunction init() {\n    submit();\n}\n\nmodule.exports = {\n    init: init\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}